# Taylor Series

So far we have calculated sine and cosine values with Python.

code: python3
    >>> import math
    >>> math.sin(1)
    0.8414709848078965

In this chapter we'll learn how these functions work, and we'll also write our
own sin and cos implementations that would be good enough for pretty much
everything.

redbox:
    This tutorial uses [radians](geometry-and-trig.html#angles),
    [unit circle trig](geometry-and-trig.html#trig-with-the-unit-circle) and
    [derivatives](derivatives.html). Be sure to learn these things first.

## Polynomials and stuff

This section introduces a few fancy words that I'll use in the rest of this
chapter. Don't worry, rest of this will be less boring.

Things like $4x^3-5x^2+2x+5$ are known as **polynomials**. They contain nothing
but constants and powers of $x$ (e.g. $x$, $x^2$, $x^3$) multiplied by
more constants and added together. For example, $-5x^2$ is $x^2$ multiplied by
the constant $-5$. Note that $x^0=1$ and $x^1=x$.

Here are some words related to polynomials:

* The **degree** of a polynomial means the highest power that $x$ is raised to.
  For example, the degree of $4x^3-5x^2+2x+5$ is 3 because the polynomial
  contains $x^3$.
* **Zeros** of a polynomial are $x$ values that make it equal to 0. For
  example, $1^2-1=0$ and $(-1)^2-1=0$, so $x=1$ and $x=-1$ are zeros of
  $x^2-1$.

A polynomial of degree $n$ has **at most** $n$ zeros. For example, we know that
$1$ and $-1$ are two zeros of $x^2-1$, but the degree of $x^2-1$ is 2 so it
cannot have any other zeros. Polynomials can also have less than $n$ zeros; for
example, $x^2$ has just 1 zero at $x=0$ and $x^2+1$ has no zeros at all because
$x^2$ is never less than 0.

The zeros of $f(x)$ can be thought of as places where the graph $y=f(x)$
touches the $x$ axis; that is, $y=0$:

asymptote:
    size(14cm);
    real f1(real x) { return x**2-1; }
    real f2(real x) { return x**2; }
    real f3(real x) { return x**2+1; }

    real xminmax=1.5, ymin=-1.2, ymax=3;
    axises(-xminmax,xminmax,ymin,ymax);

    void draw_and_label(real f(real), string text, pen color) {
        draw(graph(f, -xminmax, xminmax), color);
        real x=1.25;
        real derivative=2x;
        label(rrotate(atan(derivative))*text, (x,f(x)), p=color, align=unit((-derivative, 1)));
    }
    draw_and_label(f1, "$y=x^2-1$", deepgreen);
    draw_and_label(f2, "$y=x^2$", blue);
    draw_and_label(f3, "$y=x^2+1$", darkorange);

    dot((-1,0), dotpen, L="$-1$", align=SW);
    dot((0,0), dotpen, L="$0$", align=SE);
    dot((1,0), dotpen, L="$1$", align=SE);

The word **series** is a fancy way to say infinitely many things added to each
other. For example, $1+1+1+...$ means that we add infinitely many $1$'s, so it's
a series.

## WTF is a Taylor series?

Things like [the sine function](geometry-and-trig.html#trig-with-the-unit-circle)
cannot be polynomials because a polynomial of degree $n$ has at most $n$ zeros,
but $\sin(x)$ has infinitely many zeros:

asymptote:
    size(20cm);
    real a=-5, b=12;
    axises(a,b+1,-1.8,2.3);
    real f(real x) {return sin(x);}
    draw(graph(f, a, b), blue);
    label("$y=\sin(x)$", (tau/2,1), blue, align=N);

    dot((-tau/2,0), dotpen, L="$-\frac{\tau}{2}$", align=SW);
    dot((0,0), dotpen, L="$0$", align=SE);
    dot((tau/2,0), dotpen, L="$\frac{\tau}{2}$", align=SW);
    dot((tau,0), dotpen, L="$\tau$", align=SE);
    dot((3tau/2,0), dotpen, L="$\frac{3\tau}{2}$", align=SW);

But what if we have an infinite series instead of a polynomial? Then we can
have an infinite number of zeros. So, if $c_0,c_1,c_2,c_3,...$ are constants,
we're talking about finding their values so that we have this:

math: \sin(x)=c_0+c_1x+c_2x^2+c_3x^3+c_4x^4+...

Let's try to find those constants. We'll do this for a general $f(x)$ first,
so we get something that works with many other functions instead of just
$f(x)=\sin(x)$. I'll also use colors to make things easier to follow.

math: f(x)=\blue{c_0}+\green{c_1x}+\maroon{c_2x^2}+\olive{c_3x^3}+\purple{c_4x^4}+...

We can start by plugging in $x=0$:

math:
    f(0) &= \blue{c_0}+\green{c_1\black{0}}+\maroon{c_2\black{0}^2}+\olive{c_3\black{0}^3}+\purple{c_4\black{0}^4}+...
    &= \blue{c_0}+0+0+0+...
    &= \blue{c_0}

Great, we found one constant, but we still have infinitely many constants to
find. So, what do we do next? Let's try taking [the
derivative](derivatives.html) of both sides with the $\frac{d}{dx}x^c=cx^{c-1}$
and $\frac{d}{dx}(c\ f(x))=c\cdot\frac{d}{dx}f(x)$ rules.

math:
    f(x) &= \blue{c_0}+\green{c_1x}+\maroon{c_2x^2}+\olive{c_3x^3}+\purple{c_4x^4}+...
    f'(x) &= \blue{0}+\green{c_1}+\maroon{2c_2x}+\olive{3c_3x^2}+\purple{4c_4x^3}+...
    f'(0) &= \green{c_1}

Let's take the derivative again a few times until we can notice a pattern. Here
$f''$ means the derivative of the derivative. It'll look like a mess, but it's
not very complicated.

math:
    f'(x) &= \green{c_1}+\maroon{2c_2x}+\olive{3c_3x^2}+\purple{4c_4x^3}+\blue{5c_5x^4}+...
    f''(x) &= \green{0}+\maroon{2c_2}+\olive{(3\cdot2)c_3x}+\purple{(4\cdot3)c_4x^2}+\blue{(5\cdot4)c_5x^3}+...
    f''(0) &= \maroon{2c_2}
    \maroon{c_2} &= \frac{f''(0)}{\maroon 2}

math:
    f''(x) &= \maroon{2c_2}+\olive{(3\cdot2)c_3x}+\purple{(4\cdot3)c_4x^2}+\blue{(5\cdot4)c_5x^3}+\green{(6\cdot5)c_6x^4}+...
    f'''(x) &= \maroon{0}+\olive{(3\cdot2)c_3}+\purple{(4\cdot3\cdot2)c_4x}+\blue{(5\cdot4\cdot3)c_5x^2}+\green{(6\cdot5\cdot4)c_6x^3}+...
    f'''(0) &= \olive{(3\cdot2)c_3}
    \olive{c_3} &= \frac{f'''(0)}{\olive{3\cdot2}}

math:
    f'''(x) &= \olive{(3\cdot2)c_3}+\purple{(4\cdot3\cdot2)c_4x}+\blue{(5\cdot4\cdot3)c_5x^2}+\green{(6\cdot5\cdot4)c_6x^3}+...
    f''''(x) &= \olive{0}+\purple{(4\cdot3\cdot2)c_4}+\blue{(5\cdot4\cdot3\cdot2)c_5x}+\green{(6\cdot5\cdot4\cdot3)c_6x^2}+...
    f''''(0) &= \purple{(4\cdot3\cdot2)c_4}
    \purple{c_4} &= \frac{f''''(0)}{\purple{4\cdot3\cdot2}}

At this point we need more notation:

* $f^{(n)}(x)$ is the $n$'th derivative of $f$, e.g. $f^{(4)}(x)=f''''(x)$.
  You probably agree that $f^{(10)}(x)$ is more readable than $f''''''''''(x)$.
* $n! = n\cdot(n-1)\cdot(n-2)\cdot...\cdot2\cdot1$. As a special case, $0!=1$;
  see [this video](https://www.youtube.com/watch?v=Mfk_L4Nx2ZI). Most
  programming languages have a ``factorial(n)`` function that returns $n!$.

So far we have noticed that $c_3=\frac{f'''(0)}{3!}$ and
$c_4=\frac{f''''(0)}{4!}$. The values we got for $c_2$, $c_1$ and $c_0$ are also
equal to respectively $\frac{f''(0)}{2!}$, $\frac{f'(0)}{1!}$ and
$\frac{f(0)}{0!}$. Checking them is mostly boring and straight-forward, so I'll
skip that.

If we did more of these we would notice that $c_5=\frac{f^{(5)}(0)}{5!}$,
$c_6=\frac{f^{(6)}(0)}{6!}$ and so on. Our series looks like this:

math:
    f(x) &= c_0 + c_1x + c_2x^2 + c_3x^3 + c_4x^4 + ...
    f(x) &= f(0) + \frac{f'(0)}{1!}x + \frac{f''(0)}{2!}x^2 + \frac{f'''(0)}{3!}x^3 + ...

This is known as the **Maclaurin series** of $f$. Note that factorials get
really big really fast, e.g. $10!$ is bigger than 1 million, so dividing by the
factorials gives us small numbers.

The Maclaurin series uses $0$ as some kind of "magic number" that is always put
to $f(\quad)$, $f'(\quad)$ etc., but it doesn't need to be $0$. By starting
with a constant $a$ and $f(x+a)$ instead of $f(x)$, we can find the
**Taylor series** of $f$:

math:
    f(x) = f(a) + \frac{f'(a)}{1!}(x-a) + \frac{f''(a)}{2!}(x-a)^2 + \frac{f''(a)}{3!}(x-a)^3 + ...

Note that the Maclaurin series is just a special case of the Taylor series with
$a=0$.

## The Magic Sine

Now we have some scary-looking formulas, but we haven't actually done anything
with them yet. Let's start by plugging in $f(x)=\sin(x)$ and calculating some
derivatives (see [this thing](more-geometry-and-trig.html#derivative-of-sine)):

math:
    f(x) &= \sin(x)
    f'(x) &= \cos(x)
    f''(x) &= -\sin(x)
    f'''(x) &= -\cos(x)
    f''''(x) &= \sin(x)
    f'''''(x) &= \cos(x)
    f''''''(x) &= -\sin(x)
    &...

Now let's plug in some values. With [the unit circle](geometry-and-trig.html#common-sincos)
we know that $\cos(0)=1$ and $\sin(0) = 0$.

math:
    f(x) &= f(0) + \frac{f'(0)}{1!}x + \frac{f''(0)}{2!}x^2 + \frac{f'''(0)}{3!}x^3 + \frac{f'''(0)}{4!}x^4 + ...
    \sin(x) &=  \sin(0) + \frac{\cos(0)}{1!}x + \frac{-\sin(0)}{2!}x^2 \
                + \frac{-\cos(0)}{3!}x^3 + \frac{\sin(0)}{4!}x^4 + ...
    &=  0 + \frac{1}{1!}x + \frac{-0}{2!}x^2 + \frac{-1}{3!}x^3 + \frac{0}{4!}x^4 \
        + \frac{1}{5!}x^5 + \frac{-0}{6!}x^6 + \frac{-1}{7!}x^7 + ...
    &= x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + ...

Just to make sure it works, let's chop off the series at some point and draw a
graph of a part of it.

asymptote:
    size(18cm);
    real pminmax=5.9, xmin=-8, xmax=15, yminmax=6;
    real f(real x) { return sin(x); }
    real P(real x) { return x - x^3/factorial(3) + x^5/factorial(5)
                            - x^7/factorial(7) + x^9/factorial(9); }
    axises(xmin,xmax+1,-yminmax,yminmax);
    draw(graph(P, -pminmax, pminmax), blue);
    draw(graph(f, xmin, xmax), heavyred);
    label((3tau/4,-1), heavyred, L="$y=\sin(x)$", align=S);
    label((pminmax,P(pminmax)-1), blue,
          L="$y=x-\frac{x^3}{3!}+\frac{x^5}{5!}-\frac{x^7}{7!}+\frac{x^9}{9!}$", align=E);

The chopped off part is known as the 9th **Taylor polynomial** of $\sin(x)$
because it's a polynomial of degree 9 and it came from a Taylor series.

Anyway, I think the above graph is just amazing. Here's a working ``sin(x)``
implementation:

code: python3
    # python has math.factorial, but this is here just to show that there's
    # no magic involved
    def factorial(n):
        result = 1
        for i in range(1, n+1):     # 1, 2, ..., n
            result = result * i
        return result

    def maclaurin_sin(x):
        result = x
        for i in range(3, 20, 2):       # 3, 5, 7, ..., 19
            thingy = x**i/factorial(i)
            if i % 4 == 3:      # 3, 7, 11, ...
                result -= thingy
            else:
                result += thingy
        return result

    print(maclaurin_sin(1))     # 0.8414709848078965
    import math
    print(math.sin(1))          # also 0.8414709848078965

If you look at how Python's ``math.sin()`` is implemented it just calls C
``sin()``, and that uses Taylor polynomials just like our code. The C code is
more complicated than our ``maclaurin_sin()`` because it uses Taylor polynomials
at other places than $a=0$, but the basic idea is the same.

comment:
    TODO: draw a bunch of tiny unit circles

Let's do something even more amazing! If we notice that the $(x,y)$ point
$(-1,0)$ represents $\pi=\frac{\tau}{2}$ on the unit circle, we can tell that
$\sin(\pi)=0$. However, we can also write that as a series:

math:
    \pi - \frac{\pi^3}{3!} + \frac{\pi^5}{5!} - \frac{\pi^7}{7!} + ... = 0

So, if someone asks you what $\pi$ is, just tell them that it's the smallest
positive number satisfying that equation.

We can also do the same trick to
$e=\displaystyle\lim_{n\to\infty}\textstyle\left(1+\frac1n\right)^n=2.71828...$
because $\frac{d}{dx}e^x=e^x$. Check out [this thing](explog.html#the-e-constant)
if you haven't seen $e$ before.

math: f(x) = e^x,\ f'(x) = e^x,\ f''(x) = e^x,\ f'''(x) = e^x,\ ...

math:
    e^x &= f(0) + \frac{f'(0)}{1!}x + \frac{f''(0)}{2!}x^2 + \frac{f'''(0)}{3!}x^3 + ...
        &= e^0 + \frac{e^0}{1!}x + \frac{e^0}{2!}x^2 + \frac{e^0}{3!}x^3 + ...

This simplifies really nicely because $e^0=1$:

math:
    e^x &= 1 + \frac{x}{1!} + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!} + ...

Just compare this to the series of $\sin(x)$ or $\cos(x)$, it looks very similar
even though $\sin(x)$ is defined with a circle and $e$ has nothing to do with
circles. In fact, it's possible to find an equation with $e$ on one side and
circle stuff on the other side, and there's a detailed introduction to that on
[the head explosion zone](eulerformula.html).

We know that $e^1=e$, so we can also get this by plugging in $x=1$:

math:
    e &= 1 + \frac{1}{1!} + \frac{1^2}{2!} + \frac{1^3}{3!} + \frac{1^4}{4!} + ...
    &= 1 + \frac{1}{1} + \frac{1}{2!} + \frac{1}{3!} + \frac{1}{4!} + ...
    &= 2 + \frac{1}{2!} + \frac{1}{3!} + \frac{1}{4!} + ...

graybox: Exercises
    * What is the derivative of $\sin(x)$? Differentiate the $\sin(x)$ series
      term by term and use it to implement a ``maclaurin_cos(x)`` function in
      your favorite programming language.
    * Differentiate the $e^x$ series term by term. What do you notice?
